openapi: 3.0.1
info:
  title: Vehicle Routing API
  description: API for managing vehicles and transport providers
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /addVehicle:
    post:
      summary: Add a new vehicle
      tags:
        - Vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: Vehicle added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

  /addVehicles:
    post:
      summary: Add multiple vehicles
      tags:
        - Vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: Vehicles added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'

  /vehicles:
    get:
      summary: Get all vehicles
      tags:
        - Vehicles
      responses:
        '200':
          description: List of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'

  /vehicles/{id}:
    get:
      summary: Get a vehicle by ID
      tags:
        - Vehicles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Vehicle found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

    delete:
      summary: Delete a vehicle by ID
      tags:
        - Vehicles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Vehicle deleted successfully

  /updateVehicle:
    put:
      summary: Update a vehicle
      tags:
        - Vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: Vehicle updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

  /register:
    post:
      summary: Register a new transport provider
      tags:
        - Transport Providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegUser'
      responses:
        '200':
          description: Transport provider registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportProvider'

  /auth:
    post:
      summary: Authenticate and get an access token
      tags:
        - Transport Providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUser'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: string

  /updateUser:
    put:
      summary: Update a transport provider's details
      tags:
        - Transport Providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportProvider'
      responses:
        '200':
          description: Transport provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportProvider'

components:
  schemas:
    Vehicle:
      type: object
      properties:
        id:
          type: integer
        transportProvider:
          $ref: '#/components/schemas/TransportProvider'
        companyName:
          type: string
          description: Company name of the vehicle
          example: "Example Transport"
        vehicleType:
          type: string
          description: Type of the vehicle
          example: "Sedan"
        vehicleDescription:
          type: string
          description: Description of the vehicle
          example: "Comfortable sedan for city travel"
        canTransportWheelchairs:
          type: boolean
          description: Indicates if the vehicle can transport wheelchairs
          example: true
        seatingPlaces:
          type: integer
          description: Number of seating places in the vehicle
          example: 5
        startCoordinate:
          $ref: '#/components/schemas/Coordinates'
        endCoordinate:
          $ref: '#/components/schemas/Coordinates'
      required:
        - vehicleType
        - startCoordinate
        - endCoordinate

    TransportProvider:
      type: object
      properties:
        id:
          type: integer
        companyName:
          type: string
          description: Name of the transport provider company
          example: "Example Transport"
        username:
          type: string
          description: Username of the transport provider
          example: "exampleuser"
        password:
          type: string
          description: Password of the transport provider
          example: "password"
        accountLocked:
          type: boolean
          description: Indicates if the account is locked
          example: false
        enabled:
          type: boolean
          description: Indicates if the account is enabled
          example: true
        review:
          type: string
          description: Review or feedback about the transport provider
        companyAddress:
          $ref: '#/components/schemas/Address'
        companyCoordinates:
          $ref: '#/components/schemas/Coordinates'
      required:
        - companyName
        - username
        - password
        - enabled

    RegUser:
      type: object
      properties:
        companyName:
          type: string
          description: Name of the transport provider company
          example: "Example Transport"
        username:
          type: string
          description: Username for registration
          example: "exampleuser"
        password:
          type: string
          description: Password for registration
          example: "password"
      required:
        - companyName
        - username
        - password

    AuthUser:
      type: object
      properties:
        username:
          type: string
          description: Username for authentication
          example: "exampleuser"
        password:
          type: string
          description: Password for authentication
          example: "password"
      required:
        - username
        - password

    Address:
      type: object
      properties:
        id:
          type: integer
        streetName:
          type: string
          example: "123 Main St"
        doorNumber:
          type: string
          example: "Apt 101"
        zipcode:
          type: string
          example: "12345"
        city:
          type: string
          example: "New York"

    Coordinates:
      type: object
      properties:
        id:
          type: integer
        longitude:
          type: string
          example: "40.7128"
        latitude:
          type: string
          example: "74.0060"
